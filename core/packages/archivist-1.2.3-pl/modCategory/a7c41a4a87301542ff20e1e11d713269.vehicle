<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      'f664ea0c75be632396ea30ae83704904' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"Archivist","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * Archivist\\n *\\n * Copyright 2010-2011 by Shaun McCormick <shaun@modx.com>\\n *\\n * This file is part of Archivist, a simple archive navigation system for MODx\\n * Revolution.\\n *\\n * Archivist is free software; you can redistribute it and\\/or modify it under\\n * the terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Archivist is distributed in the hope that it will be useful, but WITHOUT\\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Archivist; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package archivist\\n *\\/\\n\\/**\\n * Display an archived result filter list\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var Archivist $archivist\\n *\\n * @package archivist\\n *\\/\\n$archivist = $modx->getService(\'archivist\',\'Archivist\',$modx->getOption(\'archivist.core_path\',null,$modx->getOption(\'core_path\').\'components\\/archivist\\/\').\'model\\/archivist\\/\',$scriptProperties);\\nif (!($archivist instanceof Archivist)) return \'\';\\n\\n\\/* setup default properties *\\/\\n$tpl = $modx->getOption(\'tpl\',$scriptProperties,\'row\');\\n$parents = !empty($scriptProperties[\'parents\']) ? $scriptProperties[\'parents\'] : $modx->resource->get(\'id\');\\n$parents = explode(\',\',$parents);\\n$target = !empty($scriptProperties[\'target\']) ? $scriptProperties[\'target\'] : $modx->resource->get(\'id\');\\n$sortBy = $modx->getOption(\'sortBy\',$scriptProperties,\'publishedon\');\\n$sortDir = $modx->getOption(\'sortDir\',$scriptProperties,\'DESC\');\\n$groupByYear = $modx->getOption(\'groupByYear\',$scriptProperties,false);\\n$sortYear = $modx->getOption(\'sortYear\',$scriptProperties,\'DESC\');\\n$depth = $modx->getOption(\'depth\',$scriptProperties,10);\\n$where = $modx->getOption(\'where\',$scriptProperties,\'\');\\n\\n$cls = $modx->getOption(\'cls\',$scriptProperties,\'arc-row\');\\n$altCls = $modx->getOption(\'altCls\',$scriptProperties,\'arc-row-alt\');\\n$lastCls = $modx->getOption(\'lastCls\',$scriptProperties,\'\');\\n$firstCls = $modx->getOption(\'firstCls\',$scriptProperties,\'\');\\n\\n$filterPrefix = $modx->getOption(\'filterPrefix\',$scriptProperties,\'arc_\');\\n$useMonth = $modx->getOption(\'useMonth\',$scriptProperties,true);\\n$useDay = $modx->getOption(\'useDay\',$scriptProperties,false);\\n$dateFormat = !empty($scriptProperties[\'dateFormat\']) ? $scriptProperties[\'dateFormat\'] : \'\';\\n$limit = $modx->getOption(\'limit\',$scriptProperties,12);\\n$start = $modx->getOption(\'start\',$scriptProperties,0);\\n$hideContainers = $modx->getOption(\'hideContainers\',$scriptProperties,true);\\n$useFurls = $modx->getOption(\'useFurls\',$scriptProperties,true);\\n$persistGetParams = $modx->getOption(\'persistGetParams\',$scriptProperties,false);\\n\\n\\/* handle existing GET params *\\/\\n$extraParams = $modx->getOption(\'extraParams\',$scriptProperties,array());\\n$extraParams = $archivist->mergeGetParams($extraParams,$persistGetParams,$filterPrefix);\\n\\n\\/* set locale for date processing *\\/\\nif ($modx->getOption(\'setLocale\',$scriptProperties,true)) {\\n    $cultureKey = $modx->getOption(\'cultureKey\',null,\'en\');\\n    $locale = !empty($scriptProperties[\'locale\']) ? $scriptProperties[\'locale\'] : $cultureKey;\\n    if (!empty($locale)) {\\n        setlocale(LC_ALL,$locale);\\n    }\\n}\\n\\n\\/* find children of parents *\\/\\n$children = array();\\nforeach ($parents as $parent) {\\n    $pchildren = $modx->getChildIds($parent, $depth);\\n    if (!empty($pchildren)) $children = array_merge($children, $pchildren);\\n}\\nif (!empty($children)) $parents = array_merge($parents, $children);\\n\\n\\/* get filter format *\\/\\n$sqlDateFormat = \'%Y\';\\nif (empty($dateFormat)) {\\n    $dateFormat = $sqlDateFormat = \'%Y\';\\n    if ($useMonth) {\\n        $dateFormat = \'%B \'.$dateFormat;\\n        $sqlDateFormat = \'%b \'.$sqlDateFormat;\\n    }\\n    if ($useDay) {\\n        $dateFormat = \'%d \'.$dateFormat;\\n        $sqlDateFormat = \'%d \'.$sqlDateFormat;\\n    }\\n}\\n\\/* build query *\\/\\n$c = $modx->newQuery(\'modResource\');\\n$fields = $modx->getSelectColumns(\'modResource\',\'\',\'\',array(\'id\',$sortBy));\\n$c->select($fields);\\n$c->select(array(\\n    \'FROM_UNIXTIME(\'.$sortBy.\',\\"\'.$sqlDateFormat.\'\\") AS \'.$modx->escape(\'date\'),\\n    \'FROM_UNIXTIME(\'.$sortBy.\',\\"\'.$sqlDateFormat.\'\\") AS \'.$modx->escape(\'date\'),\\n    \'FROM_UNIXTIME(\'.$sortBy.\',\\"%D\\") AS \'.$modx->escape(\'day_formatted\'),\\n    \'COUNT(\'.$modx->escape(\'id\').\') AS \'.$modx->escape(\'count\'),\\n));\\n$c->where(array(\\n    \'parent:IN\' => $parents,\\n    \'published\' => true,\\n    \'deleted\' => false,\\n));\\n\\/* don\'t grab unpublished resources *\\/\\n$c->where(array(\\n    \'published\' => true,\\n));\\nif ($hideContainers) {\\n    $c->where(array(\\n        \'isfolder\' => false,\\n    ));\\n}\\nif (!empty($where)) {\\n    $where = $modx->fromJSON($where);\\n    $c->where($where);\\n}\\n$exclude = $modx->getOption(\'exclude\',$scriptProperties,\'\');\\nif (!empty($exclude)) {\\n    $c->where(array(\\n        \'id:NOT IN\' => is_array($exclude) ? $exclude : explode(\',\',$exclude),\\n    ));\\n}\\n$c->sortby(\'FROM_UNIXTIME(`\'.$sortBy.\'`,\\"%Y\\") \'.$sortDir.\', FROM_UNIXTIME(`\'.$sortBy.\'`,\\"%m\\") \'.$sortDir.\', FROM_UNIXTIME(`\'.$sortBy.\'`,\\"%d\\") \'.$sortDir,\'\');\\n$c->groupby(\'FROM_UNIXTIME(`\'.$sortBy.\'`,\\"\'.$sqlDateFormat.\'\\")\');\\n\\/* if limiting to X records *\\/\\nif (!empty($limit)) { $c->limit($limit,$start); }\\n$resources = $modx->getIterator(\'modResource\',$c);\\n\\n\\/* iterate over resources *\\/\\n$output = array();\\n$groupByYearOutput = array();\\n$idx = 0;\\n$count = count($resources);\\n\\/** @var modResource $resource *\\/\\nforeach ($resources as $resource) {\\n    $resourceArray = $resource->toArray();\\n\\n    $date = $resource->get($sortBy);\\n    $dateObj = strtotime($date);\\n\\n    $resourceArray[\'date\'] = strftime($dateFormat,$dateObj);\\n    $resourceArray[\'month_name_abbr\'] = strftime(\'%b\',$dateObj);\\n    $resourceArray[\'month_name\'] = strftime(\'%B\',$dateObj);\\n    $resourceArray[\'month\'] = strftime(\'%m\',$dateObj);\\n    $resourceArray[\'year\'] = strftime(\'%Y\',$dateObj);\\n    $resourceArray[\'year_two_digit\'] = strftime(\'%y\',$dateObj);\\n    $resourceArray[\'day\'] = strftime(\'%d\',$dateObj);\\n    $resourceArray[\'weekday\'] = strftime(\'%A\',$dateObj);\\n    $resourceArray[\'weekday_abbr\'] = strftime(\'%a\',$dateObj);\\n    $resourceArray[\'weekday_idx\'] = strftime(\'%w\',$dateObj);\\n\\n    \\/* css classes *\\/\\n    $resourceArray[\'cls\'] = $cls;\\n    if ($idx % 2) { $resourceArray[\'cls\'] .= \' \'.$altCls; }\\n    if ($idx == 0 && !empty($firstCls)) { $resourceArray[\'cls\'] .= \' \'.$firstCls; }\\n    if ($idx+1 == $count && !empty($lastCls)) { $resourceArray[\'cls\'] .= \' \'.$lastCls; }\\n\\n    \\/* setup GET params *\\/\\n    $params = array();\\n    $params[$filterPrefix.\'year\'] = $resourceArray[\'year\'];\\n\\n    \\/* if using month filter *\\/\\n    if ($useMonth) {\\n        $params[$filterPrefix.\'month\'] = $resourceArray[\'month\'];\\n    }\\n    \\/* if using day filter (why you would ever is beyond me...) *\\/\\n    if ($useDay) {\\n        $params[$filterPrefix.\'day\'] = $resourceArray[\'day\'];\\n        if (empty($scriptProperties[\'dateFormat\'])) {\\n            $resourceArray[\'date\'] = $resourceArray[\'month_name\'].\' \'.$resourceArray[\'day\'].\', \'.$resourceArray[\'year\'];\\n        }\\n    }\\n\\n    if ($useFurls) {\\n        $params = implode(\'\\/\',$params);\\n        if (!empty($extraParams)) $params .= \'?\'.$extraParams;\\n        $resourceArray[\'url\'] = $modx->makeUrl($target).$params;\\n    } else {\\n        $params = http_build_query($params);\\n        if (!empty($extraParams)) $params .= \'&\'.$extraParams;\\n        $resourceArray[\'url\'] = $modx->makeUrl($target,\'\',$params);\\n    }\\n\\n    if ($groupByYear) {\\n        $groupByYearOutput[$resourceArray[\'year\']][] = $resourceArray;\\n    } else {\\n        $output[] = $archivist->getChunk($tpl,$resourceArray);\\n    }\\n\\n    $idx++;\\n}\\n\\nif ($groupByYear) {\\n    $wrapperTpl = $modx->getOption(\'yearGroupTpl\',$scriptProperties,\'yeargroup\');\\n    $wrapperRowSeparator = $modx->getOption(\'yearGroupRowSeparator\',$scriptProperties,\\"\\\\n\\");\\n    if (strtolower($sortYear) === \'asc\') {\\n        ksort($groupByYearOutput);\\n    } else {\\n        krsort($groupByYearOutput);\\n    }\\n    foreach ($groupByYearOutput as $year => $row) {\\n        $wrapper[\'year\'] = $year;\\n\\n        $params = array();\\n        $params[$filterPrefix.\'year\'] = $year;\\n\\n        if ($useFurls) {\\n            $params = implode(\'\\/\',$params);\\n            if (!empty($extraParams)) $params .= \'?\'.$extraParams;\\n            $wrapper[\'url\'] = $modx->makeUrl($target).$params;\\n        } else {\\n            $params = http_build_query($params);\\n            if (!empty($extraParams)) $params .= \'&\'.$extraParams;\\n            $wrapper[\'url\'] = $modx->makeUrl($target,\'\',$params);\\n        }\\n\\n        $wrapper[\'row\'] = array();\\n        foreach ($row as $month) {\\n            $wrapper[\'row\'][] = $archivist->getChunk($tpl,$month);\\n        }\\n        $wrapper[\'row\'] = implode($wrapperRowSeparator,$wrapper[\'row\']);\\n        $output[] = $archivist->getChunk($wrapperTpl,$wrapper);\\n    }\\n}\\n\\n\\/* output or set to placeholder *\\/\\n$outputSeparator = $modx->getOption(\'outputSeparator\',$scriptProperties,\\"\\\\n\\");\\n$output = implode($outputSeparator,$output);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\',$scriptProperties,false);\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder,$output);\\n    return \'\';\\n}\\nreturn $output;","locked":0,"properties":"a:26:{s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:23:\\"prop_archivist.tpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"row\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"target\\";a:7:{s:4:\\"name\\";s:6:\\"target\\";s:4:\\"desc\\";s:26:\\"prop_archivist.target_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"parents\\";a:7:{s:4:\\"name\\";s:7:\\"parents\\";s:4:\\"desc\\";s:27:\\"prop_archivist.parents_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"depth\\";a:7:{s:4:\\"name\\";s:5:\\"depth\\";s:4:\\"desc\\";s:25:\\"prop_archivist.depth_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"10\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"exclude\\";a:7:{s:4:\\"name\\";s:7:\\"exclude\\";s:4:\\"desc\\";s:27:\\"prop_archivist.exclude_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"sortBy\\";a:7:{s:4:\\"name\\";s:6:\\"sortBy\\";s:4:\\"desc\\";s:26:\\"prop_archivist.sortby_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"publishedon\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"sortDir\\";a:7:{s:4:\\"name\\";s:7:\\"sortDir\\";s:4:\\"desc\\";s:27:\\"prop_archivist.sortdir_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:18:\\"prop_arc.ascending\\";s:5:\\"value\\";s:3:\\"ASC\\";}i:1;a:2:{s:4:\\"text\\";s:19:\\"prop_arc.descending\\";s:5:\\"value\\";s:4:\\"DESC\\";}}s:5:\\"value\\";s:4:\\"DESC\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"limit\\";a:7:{s:4:\\"name\\";s:5:\\"limit\\";s:4:\\"desc\\";s:25:\\"prop_archivist.limit_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"12\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"start\\";a:7:{s:4:\\"name\\";s:5:\\"start\\";s:4:\\"desc\\";s:25:\\"prop_archivist.start_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"useMonth\\";a:7:{s:4:\\"name\\";s:8:\\"useMonth\\";s:4:\\"desc\\";s:28:\\"prop_archivist.usemonth_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"useDay\\";a:7:{s:4:\\"name\\";s:6:\\"useDay\\";s:4:\\"desc\\";s:26:\\"prop_archivist.useday_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"groupByYear\\";a:7:{s:4:\\"name\\";s:11:\\"groupByYear\\";s:4:\\"desc\\";s:31:\\"prop_archivist.groupbyyear_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"groupByYearTpl\\";a:7:{s:4:\\"name\\";s:14:\\"groupByYearTpl\\";s:4:\\"desc\\";s:34:\\"prop_archivist.groupbyyeartpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:9:\\"yeargroup\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"dateFormat\\";a:7:{s:4:\\"name\\";s:10:\\"dateFormat\\";s:4:\\"desc\\";s:30:\\"prop_archivist.dateformat_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"useFurls\\";a:7:{s:4:\\"name\\";s:8:\\"useFurls\\";s:4:\\"desc\\";s:23:\\"prop_archivist.usefurls\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:16:\\"persistGetParams\\";a:7:{s:4:\\"name\\";s:16:\\"persistGetParams\\";s:4:\\"desc\\";s:36:\\"prop_archivist.persistgetparams_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"extraParams\\";a:7:{s:4:\\"name\\";s:11:\\"extraParams\\";s:4:\\"desc\\";s:31:\\"prop_archivist.extraparams_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"cls\\";a:7:{s:4:\\"name\\";s:3:\\"cls\\";s:4:\\"desc\\";s:23:\\"prop_archivist.cls_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:7:\\"arc-row\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"altCls\\";a:7:{s:4:\\"name\\";s:6:\\"altCls\\";s:4:\\"desc\\";s:26:\\"prop_archivist.altcls_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"arc-row-alt\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"firstCls\\";a:7:{s:4:\\"name\\";s:8:\\"firstCls\\";s:4:\\"desc\\";s:28:\\"prop_archivist.firstcls_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"lastCls\\";a:7:{s:4:\\"name\\";s:7:\\"lastCls\\";s:4:\\"desc\\";s:27:\\"prop_archivist.lastcls_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"filterPrefix\\";a:7:{s:4:\\"name\\";s:12:\\"filterPrefix\\";s:4:\\"desc\\";s:32:\\"prop_archivist.filterprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:4:\\"arc_\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:33:\\"prop_archivist.toplaceholder_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"setLocale\\";a:7:{s:4:\\"name\\";s:9:\\"setLocale\\";s:4:\\"desc\\";s:29:\\"prop_archivist.setlocale_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"locale\\";a:7:{s:4:\\"name\\";s:6:\\"locale\\";s:4:\\"desc\\";s:26:\\"prop_archivist.locale_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"hideContainers\\";a:7:{s:4:\\"name\\";s:14:\\"hideContainers\\";s:4:\\"desc\\";s:41:\\"prop_archivistbymonth.hidecontainers_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * Archivist\\n *\\n * Copyright 2010-2011 by Shaun McCormick <shaun@modx.com>\\n *\\n * This file is part of Archivist, a simple archive navigation system for MODx\\n * Revolution.\\n *\\n * Archivist is free software; you can redistribute it and\\/or modify it under\\n * the terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Archivist is distributed in the hope that it will be useful, but WITHOUT\\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Archivist; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package archivist\\n *\\/\\n\\/**\\n * Display an archived result filter list\\n *\\n * @var modX $modx\\n * @var array $scriptProperties\\n * @var Archivist $archivist\\n *\\n * @package archivist\\n *\\/\\n$archivist = $modx->getService(\'archivist\',\'Archivist\',$modx->getOption(\'archivist.core_path\',null,$modx->getOption(\'core_path\').\'components\\/archivist\\/\').\'model\\/archivist\\/\',$scriptProperties);\\nif (!($archivist instanceof Archivist)) return \'\';\\n\\n\\/* setup default properties *\\/\\n$tpl = $modx->getOption(\'tpl\',$scriptProperties,\'row\');\\n$parents = !empty($scriptProperties[\'parents\']) ? $scriptProperties[\'parents\'] : $modx->resource->get(\'id\');\\n$parents = explode(\',\',$parents);\\n$target = !empty($scriptProperties[\'target\']) ? $scriptProperties[\'target\'] : $modx->resource->get(\'id\');\\n$sortBy = $modx->getOption(\'sortBy\',$scriptProperties,\'publishedon\');\\n$sortDir = $modx->getOption(\'sortDir\',$scriptProperties,\'DESC\');\\n$groupByYear = $modx->getOption(\'groupByYear\',$scriptProperties,false);\\n$sortYear = $modx->getOption(\'sortYear\',$scriptProperties,\'DESC\');\\n$depth = $modx->getOption(\'depth\',$scriptProperties,10);\\n$where = $modx->getOption(\'where\',$scriptProperties,\'\');\\n\\n$cls = $modx->getOption(\'cls\',$scriptProperties,\'arc-row\');\\n$altCls = $modx->getOption(\'altCls\',$scriptProperties,\'arc-row-alt\');\\n$lastCls = $modx->getOption(\'lastCls\',$scriptProperties,\'\');\\n$firstCls = $modx->getOption(\'firstCls\',$scriptProperties,\'\');\\n\\n$filterPrefix = $modx->getOption(\'filterPrefix\',$scriptProperties,\'arc_\');\\n$useMonth = $modx->getOption(\'useMonth\',$scriptProperties,true);\\n$useDay = $modx->getOption(\'useDay\',$scriptProperties,false);\\n$dateFormat = !empty($scriptProperties[\'dateFormat\']) ? $scriptProperties[\'dateFormat\'] : \'\';\\n$limit = $modx->getOption(\'limit\',$scriptProperties,12);\\n$start = $modx->getOption(\'start\',$scriptProperties,0);\\n$hideContainers = $modx->getOption(\'hideContainers\',$scriptProperties,true);\\n$useFurls = $modx->getOption(\'useFurls\',$scriptProperties,true);\\n$persistGetParams = $modx->getOption(\'persistGetParams\',$scriptProperties,false);\\n\\n\\/* handle existing GET params *\\/\\n$extraParams = $modx->getOption(\'extraParams\',$scriptProperties,array());\\n$extraParams = $archivist->mergeGetParams($extraParams,$persistGetParams,$filterPrefix);\\n\\n\\/* set locale for date processing *\\/\\nif ($modx->getOption(\'setLocale\',$scriptProperties,true)) {\\n    $cultureKey = $modx->getOption(\'cultureKey\',null,\'en\');\\n    $locale = !empty($scriptProperties[\'locale\']) ? $scriptProperties[\'locale\'] : $cultureKey;\\n    if (!empty($locale)) {\\n        setlocale(LC_ALL,$locale);\\n    }\\n}\\n\\n\\/* find children of parents *\\/\\n$children = array();\\nforeach ($parents as $parent) {\\n    $pchildren = $modx->getChildIds($parent, $depth);\\n    if (!empty($pchildren)) $children = array_merge($children, $pchildren);\\n}\\nif (!empty($children)) $parents = array_merge($parents, $children);\\n\\n\\/* get filter format *\\/\\n$sqlDateFormat = \'%Y\';\\nif (empty($dateFormat)) {\\n    $dateFormat = $sqlDateFormat = \'%Y\';\\n    if ($useMonth) {\\n        $dateFormat = \'%B \'.$dateFormat;\\n        $sqlDateFormat = \'%b \'.$sqlDateFormat;\\n    }\\n    if ($useDay) {\\n        $dateFormat = \'%d \'.$dateFormat;\\n        $sqlDateFormat = \'%d \'.$sqlDateFormat;\\n    }\\n}\\n\\/* build query *\\/\\n$c = $modx->newQuery(\'modResource\');\\n$fields = $modx->getSelectColumns(\'modResource\',\'\',\'\',array(\'id\',$sortBy));\\n$c->select($fields);\\n$c->select(array(\\n    \'FROM_UNIXTIME(\'.$sortBy.\',\\"\'.$sqlDateFormat.\'\\") AS \'.$modx->escape(\'date\'),\\n    \'FROM_UNIXTIME(\'.$sortBy.\',\\"\'.$sqlDateFormat.\'\\") AS \'.$modx->escape(\'date\'),\\n    \'FROM_UNIXTIME(\'.$sortBy.\',\\"%D\\") AS \'.$modx->escape(\'day_formatted\'),\\n    \'COUNT(\'.$modx->escape(\'id\').\') AS \'.$modx->escape(\'count\'),\\n));\\n$c->where(array(\\n    \'parent:IN\' => $parents,\\n    \'published\' => true,\\n    \'deleted\' => false,\\n));\\n\\/* don\'t grab unpublished resources *\\/\\n$c->where(array(\\n    \'published\' => true,\\n));\\nif ($hideContainers) {\\n    $c->where(array(\\n        \'isfolder\' => false,\\n    ));\\n}\\nif (!empty($where)) {\\n    $where = $modx->fromJSON($where);\\n    $c->where($where);\\n}\\n$exclude = $modx->getOption(\'exclude\',$scriptProperties,\'\');\\nif (!empty($exclude)) {\\n    $c->where(array(\\n        \'id:NOT IN\' => is_array($exclude) ? $exclude : explode(\',\',$exclude),\\n    ));\\n}\\n$c->sortby(\'FROM_UNIXTIME(`\'.$sortBy.\'`,\\"%Y\\") \'.$sortDir.\', FROM_UNIXTIME(`\'.$sortBy.\'`,\\"%m\\") \'.$sortDir.\', FROM_UNIXTIME(`\'.$sortBy.\'`,\\"%d\\") \'.$sortDir,\'\');\\n$c->groupby(\'FROM_UNIXTIME(`\'.$sortBy.\'`,\\"\'.$sqlDateFormat.\'\\")\');\\n\\/* if limiting to X records *\\/\\nif (!empty($limit)) { $c->limit($limit,$start); }\\n$resources = $modx->getIterator(\'modResource\',$c);\\n\\n\\/* iterate over resources *\\/\\n$output = array();\\n$groupByYearOutput = array();\\n$idx = 0;\\n$count = count($resources);\\n\\/** @var modResource $resource *\\/\\nforeach ($resources as $resource) {\\n    $resourceArray = $resource->toArray();\\n\\n    $date = $resource->get($sortBy);\\n    $dateObj = strtotime($date);\\n\\n    $resourceArray[\'date\'] = strftime($dateFormat,$dateObj);\\n    $resourceArray[\'month_name_abbr\'] = strftime(\'%b\',$dateObj);\\n    $resourceArray[\'month_name\'] = strftime(\'%B\',$dateObj);\\n    $resourceArray[\'month\'] = strftime(\'%m\',$dateObj);\\n    $resourceArray[\'year\'] = strftime(\'%Y\',$dateObj);\\n    $resourceArray[\'year_two_digit\'] = strftime(\'%y\',$dateObj);\\n    $resourceArray[\'day\'] = strftime(\'%d\',$dateObj);\\n    $resourceArray[\'weekday\'] = strftime(\'%A\',$dateObj);\\n    $resourceArray[\'weekday_abbr\'] = strftime(\'%a\',$dateObj);\\n    $resourceArray[\'weekday_idx\'] = strftime(\'%w\',$dateObj);\\n\\n    \\/* css classes *\\/\\n    $resourceArray[\'cls\'] = $cls;\\n    if ($idx % 2) { $resourceArray[\'cls\'] .= \' \'.$altCls; }\\n    if ($idx == 0 && !empty($firstCls)) { $resourceArray[\'cls\'] .= \' \'.$firstCls; }\\n    if ($idx+1 == $count && !empty($lastCls)) { $resourceArray[\'cls\'] .= \' \'.$lastCls; }\\n\\n    \\/* setup GET params *\\/\\n    $params = array();\\n    $params[$filterPrefix.\'year\'] = $resourceArray[\'year\'];\\n\\n    \\/* if using month filter *\\/\\n    if ($useMonth) {\\n        $params[$filterPrefix.\'month\'] = $resourceArray[\'month\'];\\n    }\\n    \\/* if using day filter (why you would ever is beyond me...) *\\/\\n    if ($useDay) {\\n        $params[$filterPrefix.\'day\'] = $resourceArray[\'day\'];\\n        if (empty($scriptProperties[\'dateFormat\'])) {\\n            $resourceArray[\'date\'] = $resourceArray[\'month_name\'].\' \'.$resourceArray[\'day\'].\', \'.$resourceArray[\'year\'];\\n        }\\n    }\\n\\n    if ($useFurls) {\\n        $params = implode(\'\\/\',$params);\\n        if (!empty($extraParams)) $params .= \'?\'.$extraParams;\\n        $resourceArray[\'url\'] = $modx->makeUrl($target).$params;\\n    } else {\\n        $params = http_build_query($params);\\n        if (!empty($extraParams)) $params .= \'&\'.$extraParams;\\n        $resourceArray[\'url\'] = $modx->makeUrl($target,\'\',$params);\\n    }\\n\\n    if ($groupByYear) {\\n        $groupByYearOutput[$resourceArray[\'year\']][] = $resourceArray;\\n    } else {\\n        $output[] = $archivist->getChunk($tpl,$resourceArray);\\n    }\\n\\n    $idx++;\\n}\\n\\nif ($groupByYear) {\\n    $wrapperTpl = $modx->getOption(\'yearGroupTpl\',$scriptProperties,\'yeargroup\');\\n    $wrapperRowSeparator = $modx->getOption(\'yearGroupRowSeparator\',$scriptProperties,\\"\\\\n\\");\\n    if (strtolower($sortYear) === \'asc\') {\\n        ksort($groupByYearOutput);\\n    } else {\\n        krsort($groupByYearOutput);\\n    }\\n    foreach ($groupByYearOutput as $year => $row) {\\n        $wrapper[\'year\'] = $year;\\n\\n        $params = array();\\n        $params[$filterPrefix.\'year\'] = $year;\\n\\n        if ($useFurls) {\\n            $params = implode(\'\\/\',$params);\\n            if (!empty($extraParams)) $params .= \'?\'.$extraParams;\\n            $wrapper[\'url\'] = $modx->makeUrl($target).$params;\\n        } else {\\n            $params = http_build_query($params);\\n            if (!empty($extraParams)) $params .= \'&\'.$extraParams;\\n            $wrapper[\'url\'] = $modx->makeUrl($target,\'\',$params);\\n        }\\n\\n        $wrapper[\'row\'] = array();\\n        foreach ($row as $month) {\\n            $wrapper[\'row\'][] = $archivist->getChunk($tpl,$month);\\n        }\\n        $wrapper[\'row\'] = implode($wrapperRowSeparator,$wrapper[\'row\']);\\n        $output[] = $archivist->getChunk($wrapperTpl,$wrapper);\\n    }\\n}\\n\\n\\/* output or set to placeholder *\\/\\n$outputSeparator = $modx->getOption(\'outputSeparator\',$scriptProperties,\\"\\\\n\\");\\n$output = implode($outputSeparator,$output);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\',$scriptProperties,false);\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder,$output);\\n    return \'\';\\n}\\nreturn $output;"}',
        'guid' => '66bbe29ccf794d8d9d3a095c717f10e5',
        'native_key' => 1,
        'signature' => '6430ee75535913196ce28de5024c7851',
      ),
      '7dbd8ab6c15b0213eed647bbf99d8881' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":2,"source":0,"property_preprocess":0,"name":"getArchives","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * Archivist\\n *\\n * Copyright 2010-2011 by Shaun McCormick <shaun@modx.com>\\n *\\n * This file is part of Archivist, a simple archive navigation system for MODx\\n * Revolution.\\n *\\n * Archivist is free software; you can redistribute it and\\/or modify it under\\n * the terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Archivist is distributed in the hope that it will be useful, but WITHOUT\\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Archivist; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package archivist\\n *\\/\\n\\/**\\n * getArchives\\n *\\n * Used to display a list of Resources for a given archive state.\\n *\\n * Written by Shaun McCormick <shaun+archivist@modx.com>. Based on getResources by Jason Coward <jason@modxcms.com>\\n *\\n * @var Archivist $archivist\\n * @var modX $modx\\n * @var array $scriptProperties\\n * \\n * @package archivist\\n *\\/\\n$archivist = $modx->getService(\'archivist\',\'Archivist\',$modx->getOption(\'archivist.core_path\',null,$modx->getOption(\'core_path\').\'components\\/archivist\\/\').\'model\\/archivist\\/\',$scriptProperties);\\nif (!($archivist instanceof Archivist)) return \'\';\\n\\n\\/* setup some getArchives-specific properties *\\/\\n$filterPrefix = $modx->getOption(\'filterPrefix\',$scriptProperties,\'arc_\');\\n$filterField = $modx->getOption(\'filterField\',$scriptProperties,\'publishedon\');\\n\\n\\/* first off, let\'s sync the archivist.archive_ids setting *\\/\\nif ($modx->getOption(\'makeArchive\',$scriptProperties,true)) {\\n    $archivist->makeArchive($modx->resource->get(\'id\'),$filterPrefix);\\n}\\n\\n\\/* get filter by year, month, and\\/or day. Sanitize to prevent injection. *\\/\\n$where = $modx->getOption(\'where\',$scriptProperties,false);\\n$where = is_array($where) ? $where : $modx->fromJSON($where);\\n$parameters = $modx->request->getParameters();\\n\\n$year = $modx->getOption($filterPrefix.\'year\',$parameters,$modx->getOption(\'year\',$scriptProperties,\'\'));\\n$year = (int)$archivist->sanitize($year);\\nif (!empty($year)) {\\n    $modx->setPlaceholder($filterPrefix.\'year\',$year);\\n    $where[] = \'FROM_UNIXTIME(`\'.$filterField.\'`,\\"%Y\\") = \\"\'.$year.\'\\"\';\\n}\\n$month = $modx->getOption($filterPrefix.\'month\',$parameters,$modx->getOption(\'month\',$scriptProperties,\'\'));\\n$month = (int)$archivist->sanitize($month);\\nif (!empty($month)) {\\n    if (strlen($month) == 1) $month = \'0\'.$month;\\n    $modx->setPlaceholder($filterPrefix.\'month\',$month);\\n    $modx->setPlaceholder($filterPrefix.\'month_name\',$archivist->translateMonth($month));\\n    $where[] = \'FROM_UNIXTIME(`\'.$filterField.\'`,\\"%m\\") = \\"\'.$month.\'\\"\';\\n}\\n$day = $modx->getOption($filterPrefix.\'day\',$parameters,$modx->getOption(\'day\',$scriptProperties,\'\'));\\n$day = (int)$archivist->sanitize($day);\\nif (!empty($day)) {\\n    if (strlen($day) == 1) $day = \'0\'.$day;\\n    $modx->setPlaceholder($filterPrefix.\'day\',$day);\\n    $where[] = \'FROM_UNIXTIME(`\'.$filterField.\'`,\\"%d\\") = \\"\'.$day.\'\\"\';\\n}\\n\\n\\/* author handling *\\/\\nif (!empty($parameters[$filterPrefix.\'author\'])) {\\n    \\/** @var modUser $user *\\/\\n    $user = $modx->getObject(\'modUser\',array(\'username\' => $parameters[$filterPrefix.\'author\']));\\n    if ($user) {\\n        $where[\'createdby\'] = $user->get(\'id\');\\n    }\\n}\\n$scriptProperties[\'where\'] = $modx->toJSON($where);\\n\\n\\/* better tags handling *\\/\\n$tagKeyVar = $modx->getOption(\'tagKeyVar\',$scriptProperties,\'key\');\\n$tagKey = (!empty($tagKeyVar) && array_key_exists($tagKeyVar,$parameters) && !empty($parameters[$tagKeyVar])) ? $parameters[$tagKeyVar] : $modx->getOption(\'tagKey\',$scriptProperties,\'tags\');\\n$tagRequestParam = $modx->getOption(\'tagRequestParam\',$scriptProperties,\'tag\');\\n$tag = $modx->getOption(\'tag\',$scriptProperties,array_key_exists($tagRequestParam,$parameters) ? urldecode($parameters[$tagRequestParam]) : \'\');\\nif (!empty($tag)) {\\n    $tag = $modx->stripTags($tag);\\n    $tagSearchType = $modx->getOption(\'tagSearchType\',$scriptProperties,\'exact\');\\n    if ($tagSearchType == \'contains\') {\\n        $scriptProperties[\'tvFilters\'] = $tagKey.\'==%\'.$tag.\'%\';\\n    } else if ($tagSearchType == \'beginswith\') {\\n        $scriptProperties[\'tvFilters\'] = $tagKey.\'==%\'.$tag.\'\';\\n    } else if ($tagSearchType == \'endswith\') {\\n        $scriptProperties[\'tvFilters\'] = $tagKey.\'==\'.$tag.\'%\';\\n    } else {\\n        $scriptProperties[\'tvFilters\'] = $tagKey.\'==\'.$tag.\'\';\\n    }\\n}\\n\\n$grSnippet = $modx->getOption(\'grSnippet\',$scriptProperties,\'getResources\');\\n\\/** @var modSnippet $snippet *\\/\\n$snippet = $modx->getObject(\'modSnippet\', array(\'name\' => $grSnippet));\\nif ($snippet) {\\n    $snippet->setCacheable(false);\\n    $output = $snippet->process($scriptProperties);\\n} else {\\n    return \'You must have getResources downloaded and installed to use this snippet.\';\\n}\\nreturn $output;","locked":0,"properties":"a:28:{s:3:\\"tpl\\";a:7:{s:4:\\"name\\";s:3:\\"tpl\\";s:4:\\"desc\\";s:25:\\"prop_getarchives.tpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"filterField\\";a:7:{s:4:\\"name\\";s:11:\\"filterField\\";s:4:\\"desc\\";s:33:\\"prop_getarchives.filterfield_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"publishedon\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"filterPrefix\\";a:7:{s:4:\\"name\\";s:12:\\"filterPrefix\\";s:4:\\"desc\\";s:34:\\"prop_getarchives.filterprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:4:\\"arc_\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"tagKey\\";a:7:{s:4:\\"name\\";s:6:\\"tagKey\\";s:4:\\"desc\\";s:28:\\"prop_getarchives.tagkey_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:4:\\"tags\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"tagKeyVar\\";a:7:{s:4:\\"name\\";s:9:\\"tagKeyVar\\";s:4:\\"desc\\";s:31:\\"prop_getarchives.tagkeyvar_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"key\\";s:7:\\"lexicon\\";s:20:\\"taglister:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:15:\\"tagRequestParam\\";a:7:{s:4:\\"name\\";s:15:\\"tagRequestParam\\";s:4:\\"desc\\";s:37:\\"prop_getarchives.tagrequestparam_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"tag\\";s:7:\\"lexicon\\";s:20:\\"taglister:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"tagSearchType\\";a:7:{s:4:\\"name\\";s:13:\\"tagSearchType\\";s:4:\\"desc\\";s:35:\\"prop_getarchives.tagsearchtype_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"text\\";s:12:\\"tst_contains\\";s:5:\\"value\\";s:8:\\"contains\\";}i:1;a:2:{s:4:\\"text\\";s:9:\\"tst_exact\\";s:5:\\"value\\";s:5:\\"exact\\";}i:2;a:2:{s:4:\\"text\\";s:14:\\"tst_beginswith\\";s:5:\\"value\\";s:10:\\"beginswith\\";}i:3;a:2:{s:4:\\"text\\";s:12:\\"tst_endswith\\";s:5:\\"value\\";s:8:\\"endswith\\";}}s:5:\\"value\\";s:8:\\"contains\\";s:7:\\"lexicon\\";s:20:\\"taglister:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:35:\\"prop_getarchives.toplaceholder_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"tplOdd\\";a:7:{s:4:\\"name\\";s:6:\\"tplOdd\\";s:4:\\"desc\\";s:28:\\"prop_getarchives.tplodd_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"tplFirst\\";a:7:{s:4:\\"name\\";s:8:\\"tplFirst\\";s:4:\\"desc\\";s:30:\\"prop_getarchives.tplfirst_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"tplLast\\";a:7:{s:4:\\"name\\";s:7:\\"tplLast\\";s:4:\\"desc\\";s:29:\\"prop_getarchives.tpllast_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"sortby\\";a:7:{s:4:\\"name\\";s:6:\\"sortby\\";s:4:\\"desc\\";s:28:\\"prop_getarchives.sortby_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"publishedon\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"sortbyAlias\\";a:7:{s:4:\\"name\\";s:11:\\"sortbyAlias\\";s:4:\\"desc\\";s:33:\\"prop_getarchives.sortbyalias_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"sortbyEscaped\\";a:7:{s:4:\\"name\\";s:13:\\"sortbyEscaped\\";s:4:\\"desc\\";s:35:\\"prop_getarchives.sortbyescaped_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"sortdir\\";a:7:{s:4:\\"name\\";s:7:\\"sortdir\\";s:4:\\"desc\\";s:29:\\"prop_getarchives.sortdir_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:18:\\"prop_arc.ascending\\";s:5:\\"value\\";s:3:\\"ASC\\";}i:1;a:2:{s:4:\\"text\\";s:19:\\"prop_arc.descending\\";s:5:\\"value\\";s:4:\\"DESC\\";}}s:5:\\"value\\";s:4:\\"DESC\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"limit\\";a:7:{s:4:\\"name\\";s:5:\\"limit\\";s:4:\\"desc\\";s:27:\\"prop_getarchives.limit_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"5\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"offset\\";a:7:{s:4:\\"name\\";s:6:\\"offset\\";s:4:\\"desc\\";s:28:\\"prop_getarchives.offset_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"0\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"tvFilters\\";a:7:{s:4:\\"name\\";s:9:\\"tvFilters\\";s:4:\\"desc\\";s:31:\\"prop_getarchives.tvfilters_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"depth\\";a:7:{s:4:\\"name\\";s:5:\\"depth\\";s:4:\\"desc\\";s:27:\\"prop_getarchives.depth_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"10\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"parents\\";a:7:{s:4:\\"name\\";s:7:\\"parents\\";s:4:\\"desc\\";s:29:\\"prop_getarchives.parents_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"includeContent\\";a:7:{s:4:\\"name\\";s:14:\\"includeContent\\";s:4:\\"desc\\";s:36:\\"prop_getarchives.includecontent_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"includeTVs\\";a:7:{s:4:\\"name\\";s:10:\\"includeTVs\\";s:4:\\"desc\\";s:32:\\"prop_getarchives.includetvs_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"processTVs\\";a:7:{s:4:\\"name\\";s:10:\\"processTVs\\";s:4:\\"desc\\";s:32:\\"prop_getarchives.processtvs_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"tvPrefix\\";a:7:{s:4:\\"name\\";s:8:\\"tvPrefix\\";s:4:\\"desc\\";s:30:\\"prop_getarchives.tvprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:3:\\"tv.\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"idx\\";a:7:{s:4:\\"name\\";s:3:\\"idx\\";s:4:\\"desc\\";s:25:\\"prop_getarchives.idx_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"first\\";a:7:{s:4:\\"name\\";s:5:\\"first\\";s:4:\\"desc\\";s:27:\\"prop_getarchives.first_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:4:\\"last\\";a:7:{s:4:\\"name\\";s:4:\\"last\\";s:4:\\"desc\\";s:26:\\"prop_getarchives.last_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"debug\\";a:7:{s:4:\\"name\\";s:5:\\"debug\\";s:4:\\"desc\\";s:27:\\"prop_getarchives.debug_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * Archivist\\n *\\n * Copyright 2010-2011 by Shaun McCormick <shaun@modx.com>\\n *\\n * This file is part of Archivist, a simple archive navigation system for MODx\\n * Revolution.\\n *\\n * Archivist is free software; you can redistribute it and\\/or modify it under\\n * the terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Archivist is distributed in the hope that it will be useful, but WITHOUT\\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Archivist; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package archivist\\n *\\/\\n\\/**\\n * getArchives\\n *\\n * Used to display a list of Resources for a given archive state.\\n *\\n * Written by Shaun McCormick <shaun+archivist@modx.com>. Based on getResources by Jason Coward <jason@modxcms.com>\\n *\\n * @var Archivist $archivist\\n * @var modX $modx\\n * @var array $scriptProperties\\n * \\n * @package archivist\\n *\\/\\n$archivist = $modx->getService(\'archivist\',\'Archivist\',$modx->getOption(\'archivist.core_path\',null,$modx->getOption(\'core_path\').\'components\\/archivist\\/\').\'model\\/archivist\\/\',$scriptProperties);\\nif (!($archivist instanceof Archivist)) return \'\';\\n\\n\\/* setup some getArchives-specific properties *\\/\\n$filterPrefix = $modx->getOption(\'filterPrefix\',$scriptProperties,\'arc_\');\\n$filterField = $modx->getOption(\'filterField\',$scriptProperties,\'publishedon\');\\n\\n\\/* first off, let\'s sync the archivist.archive_ids setting *\\/\\nif ($modx->getOption(\'makeArchive\',$scriptProperties,true)) {\\n    $archivist->makeArchive($modx->resource->get(\'id\'),$filterPrefix);\\n}\\n\\n\\/* get filter by year, month, and\\/or day. Sanitize to prevent injection. *\\/\\n$where = $modx->getOption(\'where\',$scriptProperties,false);\\n$where = is_array($where) ? $where : $modx->fromJSON($where);\\n$parameters = $modx->request->getParameters();\\n\\n$year = $modx->getOption($filterPrefix.\'year\',$parameters,$modx->getOption(\'year\',$scriptProperties,\'\'));\\n$year = (int)$archivist->sanitize($year);\\nif (!empty($year)) {\\n    $modx->setPlaceholder($filterPrefix.\'year\',$year);\\n    $where[] = \'FROM_UNIXTIME(`\'.$filterField.\'`,\\"%Y\\") = \\"\'.$year.\'\\"\';\\n}\\n$month = $modx->getOption($filterPrefix.\'month\',$parameters,$modx->getOption(\'month\',$scriptProperties,\'\'));\\n$month = (int)$archivist->sanitize($month);\\nif (!empty($month)) {\\n    if (strlen($month) == 1) $month = \'0\'.$month;\\n    $modx->setPlaceholder($filterPrefix.\'month\',$month);\\n    $modx->setPlaceholder($filterPrefix.\'month_name\',$archivist->translateMonth($month));\\n    $where[] = \'FROM_UNIXTIME(`\'.$filterField.\'`,\\"%m\\") = \\"\'.$month.\'\\"\';\\n}\\n$day = $modx->getOption($filterPrefix.\'day\',$parameters,$modx->getOption(\'day\',$scriptProperties,\'\'));\\n$day = (int)$archivist->sanitize($day);\\nif (!empty($day)) {\\n    if (strlen($day) == 1) $day = \'0\'.$day;\\n    $modx->setPlaceholder($filterPrefix.\'day\',$day);\\n    $where[] = \'FROM_UNIXTIME(`\'.$filterField.\'`,\\"%d\\") = \\"\'.$day.\'\\"\';\\n}\\n\\n\\/* author handling *\\/\\nif (!empty($parameters[$filterPrefix.\'author\'])) {\\n    \\/** @var modUser $user *\\/\\n    $user = $modx->getObject(\'modUser\',array(\'username\' => $parameters[$filterPrefix.\'author\']));\\n    if ($user) {\\n        $where[\'createdby\'] = $user->get(\'id\');\\n    }\\n}\\n$scriptProperties[\'where\'] = $modx->toJSON($where);\\n\\n\\/* better tags handling *\\/\\n$tagKeyVar = $modx->getOption(\'tagKeyVar\',$scriptProperties,\'key\');\\n$tagKey = (!empty($tagKeyVar) && array_key_exists($tagKeyVar,$parameters) && !empty($parameters[$tagKeyVar])) ? $parameters[$tagKeyVar] : $modx->getOption(\'tagKey\',$scriptProperties,\'tags\');\\n$tagRequestParam = $modx->getOption(\'tagRequestParam\',$scriptProperties,\'tag\');\\n$tag = $modx->getOption(\'tag\',$scriptProperties,array_key_exists($tagRequestParam,$parameters) ? urldecode($parameters[$tagRequestParam]) : \'\');\\nif (!empty($tag)) {\\n    $tag = $modx->stripTags($tag);\\n    $tagSearchType = $modx->getOption(\'tagSearchType\',$scriptProperties,\'exact\');\\n    if ($tagSearchType == \'contains\') {\\n        $scriptProperties[\'tvFilters\'] = $tagKey.\'==%\'.$tag.\'%\';\\n    } else if ($tagSearchType == \'beginswith\') {\\n        $scriptProperties[\'tvFilters\'] = $tagKey.\'==%\'.$tag.\'\';\\n    } else if ($tagSearchType == \'endswith\') {\\n        $scriptProperties[\'tvFilters\'] = $tagKey.\'==\'.$tag.\'%\';\\n    } else {\\n        $scriptProperties[\'tvFilters\'] = $tagKey.\'==\'.$tag.\'\';\\n    }\\n}\\n\\n$grSnippet = $modx->getOption(\'grSnippet\',$scriptProperties,\'getResources\');\\n\\/** @var modSnippet $snippet *\\/\\n$snippet = $modx->getObject(\'modSnippet\', array(\'name\' => $grSnippet));\\nif ($snippet) {\\n    $snippet->setCacheable(false);\\n    $output = $snippet->process($scriptProperties);\\n} else {\\n    return \'You must have getResources downloaded and installed to use this snippet.\';\\n}\\nreturn $output;"}',
        'guid' => '766227c0ac275bce2cb38143e577ce88',
        'native_key' => 2,
        'signature' => 'e81c7fd089bbe5593e08e1068cced4b6',
      ),
      '3bd1fba04a54b189799539a78cb9c2ed' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":3,"source":0,"property_preprocess":0,"name":"ArchivistGrouper","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * Archivist\\n *\\n * Copyright 2010-2011 by Shaun McCormick <shaun@modx.com>\\n *\\n * This file is part of Archivist, a simple archive navigation system for MODx\\n * Revolution.\\n *\\n * Archivist is free software; you can redistribute it and\\/or modify it under\\n * the terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Archivist is distributed in the hope that it will be useful, but WITHOUT\\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Archivist; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package archivist\\n *\\/\\n\\/*\\n * Display an archived result filter list, nested by month\\n *\\n * @package archivist\\n *\\/\\n$archivist = $modx->getService(\'archivist\',\'Archivist\',$modx->getOption(\'archivist.core_path\',null,$modx->getOption(\'core_path\').\'components\\/archivist\\/\').\'model\\/archivist\\/\',$scriptProperties);\\nif (!($archivist instanceof Archivist)) return \'\';\\n\\n\\/* setup default properties *\\/\\n$mode = $modx->getOption(\'mode\',$scriptProperties,\'month\');\\n$itemTpl = $modx->getOption(\'itemTpl\',$scriptProperties,\'itemBrief\');\\n$parents = !empty($scriptProperties[\'parents\']) ? $scriptProperties[\'parents\'] : $modx->resource->get(\'id\');\\n$parents = explode(\',\',$parents);\\n$target = !empty($scriptProperties[\'target\']) ? $scriptProperties[\'target\'] : $modx->resource->get(\'id\');\\n$depth = $modx->getOption(\'depth\',$scriptProperties,10);\\n$where = $modx->getOption(\'where\',$scriptProperties,\'\');\\n$hideContainers = $modx->getOption(\'hideContainers\',$scriptProperties,true);\\n$sortBy = $modx->getOption(\'sortBy\',$scriptProperties,\'publishedon\');\\n$sortDir = $modx->getOption(\'sortDir\',$scriptProperties,\'DESC\');\\n$dateFormat = !empty($scriptProperties[\'dateFormat\']) ? $scriptProperties[\'dateFormat\'] : \'\';\\n$limitGroups = $modx->getOption(\'limitGroups\',$scriptProperties,12);\\n$limitItems = $modx->getOption(\'limitItems\',$scriptProperties,0);\\n$resourceSeparator = $modx->getOption(\'resourceSeparator\',$scriptProperties,\\"\\\\n\\");\\n$groupSeparator = $modx->getOption(\'monthSeparator\',$scriptProperties,\\"\\\\n\\");\\n\\n$filterPrefix = $modx->getOption(\'filterPrefix\',$scriptProperties,\'arc_\');\\n$useFurls = $modx->getOption(\'useFurls\',$scriptProperties,true);\\n$persistGetParams = $modx->getOption(\'persistGetParams\',$scriptProperties,false);\\n\\/* handle existing GET params *\\/\\n$extraParams = $modx->getOption(\'extraParams\',$scriptProperties,array());\\n$extraParams = $archivist->mergeGetParams($extraParams,$persistGetParams,$filterPrefix);\\n\\n$cls = $modx->getOption(\'cls\',$scriptProperties,\'arc-resource-row\');\\n$altCls = $modx->getOption(\'altCls\',$scriptProperties,\'arc-resource-row-alt\');\\n\\n\\/* set locale for date processing *\\/\\nif ($modx->getOption(\'setLocale\',$scriptProperties,true)) {\\n    $cultureKey = $modx->getOption(\'cultureKey\',null,\'en\');\\n    $locale = !empty($scriptProperties[\'locale\']) ? $scriptProperties[\'locale\'] : $cultureKey;\\n    if (!empty($locale)) {\\n        setlocale(LC_ALL,$locale);\\n    }\\n}\\n\\n\\/* find children of parents *\\/\\n$children = array();\\nforeach ($parents as $parent) {\\n    $pchildren = $modx->getChildIds($parent, $depth);\\n    if (!empty($pchildren)) $children = array_merge($children, $pchildren);\\n}\\nif (!empty($children)) $parents = array_merge($parents, $children);\\n\\n\\/* build query *\\/\\n$c = $modx->newQuery(\'modResource\');\\n$c->where(array(\\n    \'parent:IN\' => $parents,\\n    \'published\' => true,\\n    \'deleted\' => false,\\n));\\nif ($hideContainers) {\\n    $c->where(array(\\n        \'isfolder\' => false,\\n    ));\\n}\\nif (!empty($where)) {\\n    $where = $modx->fromJSON($where);\\n    $c->where($where);\\n}\\n$c->sortby(\'FROM_UNIXTIME(\'.$sortBy.\',\\"%Y\\") \'.$sortDir.\', FROM_UNIXTIME(\'.$sortBy.\',\\"%m\\") \'.$sortDir.\', FROM_UNIXTIME(\'.$sortBy.\',\\"%d\\") \'.$sortDir,\'\');\\n$resources = $modx->getIterator(\'modResource\',$c);\\n\\n\\/* get grouping constraint *\\/\\nswitch ($mode) {\\n    case \'year\':\\n        $groupConstraint = \'%Y-01-01\';\\n        $groupDefaultTpl = \'yearContainer\';\\n        break;\\n    case \'month\':\\n    default:\\n        $groupConstraint = \'%Y-%m-01\';\\n        $groupDefaultTpl = \'monthContainer\';\\n        break;\\n}\\n$groupTpl = !empty($scriptProperties[\'groupTpl\']) ? $scriptProperties[\'groupTpl\'] : $groupDefaultTpl;\\n\\n\\/* iterate over resources *\\/\\n$output = array();\\n$children = array();\\n$resourceArray = array();\\n$groupIdx = 0;\\n$childIdx = 0;\\n$countGroups = 0;\\nforeach ($resources as $resource) {\\n    $resourceArray = $resource->toArray();\\n    $date = $resource->get($sortBy);\\n    $dateObj = strtotime($date);\\n    $activeTime = strftime($groupConstraint,$dateObj);\\n    if (!isset($currentTime)) {\\n        $currentTime = $activeTime;\\n    }\\n\\n    $resourceArray[\'date\'] = strftime($dateFormat,$dateObj);\\n    $resourceArray[\'month_name_abbr\'] = strftime(\'%h\',$dateObj);\\n    $resourceArray[\'month_name\'] = strftime(\'%B\',$dateObj);\\n    $resourceArray[\'month\'] = strftime(\'%m\',$dateObj);\\n    $resourceArray[\'year\'] = strftime(\'%Y\',$dateObj);\\n    $resourceArray[\'year_two_digit\'] = strftime(\'%y\',$dateObj);\\n    $resourceArray[\'day\'] = strftime(\'%d\',$dateObj);\\n    $resourceArray[\'weekday\'] = strftime(\'%A\',$dateObj);\\n    $resourceArray[\'weekday_abbr\'] = strftime(\'%a\',$dateObj);\\n    $resourceArray[\'weekday_idx\'] = strftime(\'%w\',$dateObj);\\n\\n    \\/* css classes *\\/\\n    $resourceArray[\'cls\'] = $cls;\\n    if ($childIdx % 2) { $resourceArray[\'cls\'] .= \' \'.$altCls; }\\n    $resourceArray[\'idx\'] = $childIdx;\\n\\n    if ($currentTime != $activeTime) {\\n        $groupArray = array();\\n        $timestamp = strtotime($currentTime);\\n        $groupArray[\'month_name\'] = strftime(\'%B\',$timestamp);\\n        $groupArray[\'month\'] = strftime(\'%m\',$timestamp);\\n        $groupArray[\'year\'] = strftime(\'%Y\',$timestamp);\\n        $groupArray[\'year_two_digit\'] = strftime(\'%y\',$timestamp);\\n        $groupArray[\'day\'] = strftime(\'%d\',$timestamp);\\n        $groupArray[\'weekday\'] = strftime(\'%A\',$timestamp);\\n        $groupArray[\'weekday_abbr\'] = strftime(\'%a\',$timestamp);\\n        $groupArray[\'weekday_idx\'] = strftime(\'%w\',$timestamp);\\n        $groupArray[\'resources\'] = implode($resourceSeparator,$children);\\n        $groupArray[\'idx\'] = $groupIdx;\\n\\n        \\/* setup GET params *\\/\\n        $params = array();\\n        $params[$filterPrefix.\'year\'] = $groupArray[\'year\'];\\n        if ($mode == \'month\') {\\n            $params[$filterPrefix.\'month\'] = $groupArray[\'month\'];\\n        }\\n\\n        if ($useFurls) {\\n            $params = implode(\'\\/\',$params);\\n            if (!empty($extraParams)) $params .= \'?\'.$extraParams;\\n            $groupArray[\'url\'] = $modx->makeUrl($target).$params;\\n        } else {\\n            $params = http_build_query($params);\\n            if (!empty($extraParams)) $params .= \'&\'.$extraParams;\\n            $groupArray[\'url\'] = $modx->makeUrl($target,\'\',$params);\\n        }\\n        $output[] = $archivist->getChunk($groupTpl,$groupArray);\\n        $children = array();\\n        $childIdx = 0;\\n        $countGroups++;\\n        $groupIdx++;\\n        $currentTime = $activeTime;\\n    }\\n\\n    if ($limitItems == 0 || $childIdx < $limitItems) {\\n        $children[] = $archivist->getChunk($itemTpl,$resourceArray);\\n    }\\n    $childIdx++;\\n    if ($countGroups >= $limitGroups) {\\n        break;\\n    }\\n}\\n\\n$groupArray = array();\\n$timestamp = strtotime($currentTime);\\n$groupArray[\'month_name\'] = strftime(\'%B\',$timestamp);\\n$groupArray[\'month\'] = strftime(\'%m\',$timestamp);\\n$groupArray[\'year\'] = strftime(\'%Y\',$timestamp);\\n$groupArray[\'year_two_digit\'] = strftime(\'%y\',$timestamp);\\n$groupArray[\'day\'] = strftime(\'%d\',$timestamp);\\n$groupArray[\'weekday\'] = strftime(\'%A\',$timestamp);\\n$groupArray[\'weekday_abbr\'] = strftime(\'%a\',$timestamp);\\n$groupArray[\'weekday_idx\'] = strftime(\'%w\',$timestamp);\\n$groupArray[\'resources\'] = implode($resourceSeparator,$children);\\n$groupArray[\'idx\'] = $groupIdx;\\n\\/* setup GET params *\\/\\n$params = array();\\n$params[$filterPrefix.\'year\'] = $groupArray[\'year\'];\\nif ($mode == \'month\') {\\n    $params[$filterPrefix.\'month\'] = $groupArray[\'month\'];\\n}\\n\\nif ($useFurls) {\\n    $params = implode(\'\\/\',$params);\\n    if (!empty($extraParams)) $params .= \'?\'.$extraParams;\\n    $groupArray[\'url\'] = $modx->makeUrl($target).$params;\\n} else {\\n    $params = http_build_query($params);\\n    if (!empty($extraParams)) $params .= \'&\'.$extraParams;\\n    $groupArray[\'url\'] = $modx->makeUrl($target,\'\',$params);\\n}\\n$output[] = $archivist->getChunk($groupTpl,$groupArray);\\n$children = array();\\n$childIdx = 0;\\n$countGroups++;\\n$groupIdx++;\\n\\n\\/* output or set to placeholder *\\/\\n$output = implode(\\"\\\\n\\",$output);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\',$scriptProperties,false);\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder,$output);\\n    return \'\';\\n}\\nreturn $output;","locked":0,"properties":"a:20:{s:4:\\"mode\\";a:7:{s:4:\\"name\\";s:4:\\"mode\\";s:4:\\"desc\\";s:31:\\"prop_archivistgrouper.mode_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:14:\\"prop_arc.month\\";s:5:\\"value\\";s:5:\\"month\\";}i:1;a:2:{s:4:\\"text\\";s:13:\\"prop_arc.year\\";s:5:\\"value\\";s:4:\\"year\\";}}s:5:\\"value\\";s:5:\\"month\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"itemTpl\\";a:7:{s:4:\\"name\\";s:7:\\"itemTpl\\";s:4:\\"desc\\";s:34:\\"prop_archivistgrouper.itemtpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:9:\\"itemBrief\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"groupTpl\\";a:7:{s:4:\\"name\\";s:8:\\"groupTpl\\";s:4:\\"desc\\";s:35:\\"prop_archivistgrouper.grouptpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"target\\";a:7:{s:4:\\"name\\";s:6:\\"target\\";s:4:\\"desc\\";s:33:\\"prop_archivistgrouper.target_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"parents\\";a:7:{s:4:\\"name\\";s:7:\\"parents\\";s:4:\\"desc\\";s:34:\\"prop_archivistgrouper.parents_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:5:\\"depth\\";a:7:{s:4:\\"name\\";s:5:\\"depth\\";s:4:\\"desc\\";s:32:\\"prop_archivistgrouper.depth_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"10\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"sortBy\\";a:7:{s:4:\\"name\\";s:6:\\"sortBy\\";s:4:\\"desc\\";s:33:\\"prop_archivistgrouper.sortby_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"publishedon\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"sortDir\\";a:7:{s:4:\\"name\\";s:7:\\"sortDir\\";s:4:\\"desc\\";s:34:\\"prop_archivistgrouper.sortdir_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:18:\\"prop_arc.ascending\\";s:5:\\"value\\";s:3:\\"ASC\\";}i:1;a:2:{s:4:\\"text\\";s:19:\\"prop_arc.descending\\";s:5:\\"value\\";s:4:\\"DESC\\";}}s:5:\\"value\\";s:4:\\"DESC\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"limitGroups\\";a:7:{s:4:\\"name\\";s:11:\\"limitGroups\\";s:4:\\"desc\\";s:38:\\"prop_archivistgrouper.limitgroups_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";i:12;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"dateFormat\\";a:7:{s:4:\\"name\\";s:10:\\"dateFormat\\";s:4:\\"desc\\";s:37:\\"prop_archivistgrouper.dateformat_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:3:\\"cls\\";a:7:{s:4:\\"name\\";s:3:\\"cls\\";s:4:\\"desc\\";s:30:\\"prop_archivistgrouper.cls_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:7:\\"arc-row\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"altCls\\";a:7:{s:4:\\"name\\";s:6:\\"altCls\\";s:4:\\"desc\\";s:33:\\"prop_archivistgrouper.altcls_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"arc-row-alt\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:13:\\"toPlaceholder\\";a:7:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:40:\\"prop_archivistgrouper.toplaceholder_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"setLocale\\";a:7:{s:4:\\"name\\";s:9:\\"setLocale\\";s:4:\\"desc\\";s:36:\\"prop_archivistgrouper.setlocale_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:6:\\"locale\\";a:7:{s:4:\\"name\\";s:6:\\"locale\\";s:4:\\"desc\\";s:33:\\"prop_archivistgrouper.locale_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:12:\\"filterPrefix\\";a:7:{s:4:\\"name\\";s:12:\\"filterPrefix\\";s:4:\\"desc\\";s:39:\\"prop_archivistgrouper.filterprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:4:\\"arc_\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:8:\\"useFurls\\";a:7:{s:4:\\"name\\";s:8:\\"useFurls\\";s:4:\\"desc\\";s:30:\\"prop_archivistgrouper.usefurls\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:16:\\"persistGetParams\\";a:7:{s:4:\\"name\\";s:16:\\"persistGetParams\\";s:4:\\"desc\\";s:43:\\"prop_archivistgrouper.persistgetparams_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"extraParams\\";a:7:{s:4:\\"name\\";s:11:\\"extraParams\\";s:4:\\"desc\\";s:38:\\"prop_archivistgrouper.extraparams_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:14:\\"hideContainers\\";a:7:{s:4:\\"name\\";s:14:\\"hideContainers\\";s:4:\\"desc\\";s:41:\\"prop_archivistgrouper.hidecontainers_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:20:\\"archivist:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"","content":"\\/**\\n * Archivist\\n *\\n * Copyright 2010-2011 by Shaun McCormick <shaun@modx.com>\\n *\\n * This file is part of Archivist, a simple archive navigation system for MODx\\n * Revolution.\\n *\\n * Archivist is free software; you can redistribute it and\\/or modify it under\\n * the terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * Archivist is distributed in the hope that it will be useful, but WITHOUT\\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\\n * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\\n * details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * Archivist; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package archivist\\n *\\/\\n\\/*\\n * Display an archived result filter list, nested by month\\n *\\n * @package archivist\\n *\\/\\n$archivist = $modx->getService(\'archivist\',\'Archivist\',$modx->getOption(\'archivist.core_path\',null,$modx->getOption(\'core_path\').\'components\\/archivist\\/\').\'model\\/archivist\\/\',$scriptProperties);\\nif (!($archivist instanceof Archivist)) return \'\';\\n\\n\\/* setup default properties *\\/\\n$mode = $modx->getOption(\'mode\',$scriptProperties,\'month\');\\n$itemTpl = $modx->getOption(\'itemTpl\',$scriptProperties,\'itemBrief\');\\n$parents = !empty($scriptProperties[\'parents\']) ? $scriptProperties[\'parents\'] : $modx->resource->get(\'id\');\\n$parents = explode(\',\',$parents);\\n$target = !empty($scriptProperties[\'target\']) ? $scriptProperties[\'target\'] : $modx->resource->get(\'id\');\\n$depth = $modx->getOption(\'depth\',$scriptProperties,10);\\n$where = $modx->getOption(\'where\',$scriptProperties,\'\');\\n$hideContainers = $modx->getOption(\'hideContainers\',$scriptProperties,true);\\n$sortBy = $modx->getOption(\'sortBy\',$scriptProperties,\'publishedon\');\\n$sortDir = $modx->getOption(\'sortDir\',$scriptProperties,\'DESC\');\\n$dateFormat = !empty($scriptProperties[\'dateFormat\']) ? $scriptProperties[\'dateFormat\'] : \'\';\\n$limitGroups = $modx->getOption(\'limitGroups\',$scriptProperties,12);\\n$limitItems = $modx->getOption(\'limitItems\',$scriptProperties,0);\\n$resourceSeparator = $modx->getOption(\'resourceSeparator\',$scriptProperties,\\"\\\\n\\");\\n$groupSeparator = $modx->getOption(\'monthSeparator\',$scriptProperties,\\"\\\\n\\");\\n\\n$filterPrefix = $modx->getOption(\'filterPrefix\',$scriptProperties,\'arc_\');\\n$useFurls = $modx->getOption(\'useFurls\',$scriptProperties,true);\\n$persistGetParams = $modx->getOption(\'persistGetParams\',$scriptProperties,false);\\n\\/* handle existing GET params *\\/\\n$extraParams = $modx->getOption(\'extraParams\',$scriptProperties,array());\\n$extraParams = $archivist->mergeGetParams($extraParams,$persistGetParams,$filterPrefix);\\n\\n$cls = $modx->getOption(\'cls\',$scriptProperties,\'arc-resource-row\');\\n$altCls = $modx->getOption(\'altCls\',$scriptProperties,\'arc-resource-row-alt\');\\n\\n\\/* set locale for date processing *\\/\\nif ($modx->getOption(\'setLocale\',$scriptProperties,true)) {\\n    $cultureKey = $modx->getOption(\'cultureKey\',null,\'en\');\\n    $locale = !empty($scriptProperties[\'locale\']) ? $scriptProperties[\'locale\'] : $cultureKey;\\n    if (!empty($locale)) {\\n        setlocale(LC_ALL,$locale);\\n    }\\n}\\n\\n\\/* find children of parents *\\/\\n$children = array();\\nforeach ($parents as $parent) {\\n    $pchildren = $modx->getChildIds($parent, $depth);\\n    if (!empty($pchildren)) $children = array_merge($children, $pchildren);\\n}\\nif (!empty($children)) $parents = array_merge($parents, $children);\\n\\n\\/* build query *\\/\\n$c = $modx->newQuery(\'modResource\');\\n$c->where(array(\\n    \'parent:IN\' => $parents,\\n    \'published\' => true,\\n    \'deleted\' => false,\\n));\\nif ($hideContainers) {\\n    $c->where(array(\\n        \'isfolder\' => false,\\n    ));\\n}\\nif (!empty($where)) {\\n    $where = $modx->fromJSON($where);\\n    $c->where($where);\\n}\\n$c->sortby(\'FROM_UNIXTIME(\'.$sortBy.\',\\"%Y\\") \'.$sortDir.\', FROM_UNIXTIME(\'.$sortBy.\',\\"%m\\") \'.$sortDir.\', FROM_UNIXTIME(\'.$sortBy.\',\\"%d\\") \'.$sortDir,\'\');\\n$resources = $modx->getIterator(\'modResource\',$c);\\n\\n\\/* get grouping constraint *\\/\\nswitch ($mode) {\\n    case \'year\':\\n        $groupConstraint = \'%Y-01-01\';\\n        $groupDefaultTpl = \'yearContainer\';\\n        break;\\n    case \'month\':\\n    default:\\n        $groupConstraint = \'%Y-%m-01\';\\n        $groupDefaultTpl = \'monthContainer\';\\n        break;\\n}\\n$groupTpl = !empty($scriptProperties[\'groupTpl\']) ? $scriptProperties[\'groupTpl\'] : $groupDefaultTpl;\\n\\n\\/* iterate over resources *\\/\\n$output = array();\\n$children = array();\\n$resourceArray = array();\\n$groupIdx = 0;\\n$childIdx = 0;\\n$countGroups = 0;\\nforeach ($resources as $resource) {\\n    $resourceArray = $resource->toArray();\\n    $date = $resource->get($sortBy);\\n    $dateObj = strtotime($date);\\n    $activeTime = strftime($groupConstraint,$dateObj);\\n    if (!isset($currentTime)) {\\n        $currentTime = $activeTime;\\n    }\\n\\n    $resourceArray[\'date\'] = strftime($dateFormat,$dateObj);\\n    $resourceArray[\'month_name_abbr\'] = strftime(\'%h\',$dateObj);\\n    $resourceArray[\'month_name\'] = strftime(\'%B\',$dateObj);\\n    $resourceArray[\'month\'] = strftime(\'%m\',$dateObj);\\n    $resourceArray[\'year\'] = strftime(\'%Y\',$dateObj);\\n    $resourceArray[\'year_two_digit\'] = strftime(\'%y\',$dateObj);\\n    $resourceArray[\'day\'] = strftime(\'%d\',$dateObj);\\n    $resourceArray[\'weekday\'] = strftime(\'%A\',$dateObj);\\n    $resourceArray[\'weekday_abbr\'] = strftime(\'%a\',$dateObj);\\n    $resourceArray[\'weekday_idx\'] = strftime(\'%w\',$dateObj);\\n\\n    \\/* css classes *\\/\\n    $resourceArray[\'cls\'] = $cls;\\n    if ($childIdx % 2) { $resourceArray[\'cls\'] .= \' \'.$altCls; }\\n    $resourceArray[\'idx\'] = $childIdx;\\n\\n    if ($currentTime != $activeTime) {\\n        $groupArray = array();\\n        $timestamp = strtotime($currentTime);\\n        $groupArray[\'month_name\'] = strftime(\'%B\',$timestamp);\\n        $groupArray[\'month\'] = strftime(\'%m\',$timestamp);\\n        $groupArray[\'year\'] = strftime(\'%Y\',$timestamp);\\n        $groupArray[\'year_two_digit\'] = strftime(\'%y\',$timestamp);\\n        $groupArray[\'day\'] = strftime(\'%d\',$timestamp);\\n        $groupArray[\'weekday\'] = strftime(\'%A\',$timestamp);\\n        $groupArray[\'weekday_abbr\'] = strftime(\'%a\',$timestamp);\\n        $groupArray[\'weekday_idx\'] = strftime(\'%w\',$timestamp);\\n        $groupArray[\'resources\'] = implode($resourceSeparator,$children);\\n        $groupArray[\'idx\'] = $groupIdx;\\n\\n        \\/* setup GET params *\\/\\n        $params = array();\\n        $params[$filterPrefix.\'year\'] = $groupArray[\'year\'];\\n        if ($mode == \'month\') {\\n            $params[$filterPrefix.\'month\'] = $groupArray[\'month\'];\\n        }\\n\\n        if ($useFurls) {\\n            $params = implode(\'\\/\',$params);\\n            if (!empty($extraParams)) $params .= \'?\'.$extraParams;\\n            $groupArray[\'url\'] = $modx->makeUrl($target).$params;\\n        } else {\\n            $params = http_build_query($params);\\n            if (!empty($extraParams)) $params .= \'&\'.$extraParams;\\n            $groupArray[\'url\'] = $modx->makeUrl($target,\'\',$params);\\n        }\\n        $output[] = $archivist->getChunk($groupTpl,$groupArray);\\n        $children = array();\\n        $childIdx = 0;\\n        $countGroups++;\\n        $groupIdx++;\\n        $currentTime = $activeTime;\\n    }\\n\\n    if ($limitItems == 0 || $childIdx < $limitItems) {\\n        $children[] = $archivist->getChunk($itemTpl,$resourceArray);\\n    }\\n    $childIdx++;\\n    if ($countGroups >= $limitGroups) {\\n        break;\\n    }\\n}\\n\\n$groupArray = array();\\n$timestamp = strtotime($currentTime);\\n$groupArray[\'month_name\'] = strftime(\'%B\',$timestamp);\\n$groupArray[\'month\'] = strftime(\'%m\',$timestamp);\\n$groupArray[\'year\'] = strftime(\'%Y\',$timestamp);\\n$groupArray[\'year_two_digit\'] = strftime(\'%y\',$timestamp);\\n$groupArray[\'day\'] = strftime(\'%d\',$timestamp);\\n$groupArray[\'weekday\'] = strftime(\'%A\',$timestamp);\\n$groupArray[\'weekday_abbr\'] = strftime(\'%a\',$timestamp);\\n$groupArray[\'weekday_idx\'] = strftime(\'%w\',$timestamp);\\n$groupArray[\'resources\'] = implode($resourceSeparator,$children);\\n$groupArray[\'idx\'] = $groupIdx;\\n\\/* setup GET params *\\/\\n$params = array();\\n$params[$filterPrefix.\'year\'] = $groupArray[\'year\'];\\nif ($mode == \'month\') {\\n    $params[$filterPrefix.\'month\'] = $groupArray[\'month\'];\\n}\\n\\nif ($useFurls) {\\n    $params = implode(\'\\/\',$params);\\n    if (!empty($extraParams)) $params .= \'?\'.$extraParams;\\n    $groupArray[\'url\'] = $modx->makeUrl($target).$params;\\n} else {\\n    $params = http_build_query($params);\\n    if (!empty($extraParams)) $params .= \'&\'.$extraParams;\\n    $groupArray[\'url\'] = $modx->makeUrl($target,\'\',$params);\\n}\\n$output[] = $archivist->getChunk($groupTpl,$groupArray);\\n$children = array();\\n$childIdx = 0;\\n$countGroups++;\\n$groupIdx++;\\n\\n\\/* output or set to placeholder *\\/\\n$output = implode(\\"\\\\n\\",$output);\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\',$scriptProperties,false);\\nif (!empty($toPlaceholder)) {\\n    $modx->setPlaceholder($toPlaceholder,$output);\\n    return \'\';\\n}\\nreturn $output;"}',
        'guid' => '55e613cd274512fe6a0c32a0d1f83435',
        'native_key' => 3,
        'signature' => 'f7d7c7364d07af2af2e55b58eeff6680',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'archivist',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"archivist-1.2.3-pl\\/modCategory\\/a7c41a4a87301542ff20e1e11d713269\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"archivist"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'f0f6a95a8b69a945c3dbadf0b104010c',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'a7c41a4a87301542ff20e1e11d713269',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"Archivist"}',
);